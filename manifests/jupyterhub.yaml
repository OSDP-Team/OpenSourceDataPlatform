# yamllint disable-file
---
releaseName: jupyterhub
name: jupyterhub
repo:
  name: jupyterhub
  url: https://jupyterhub.github.io/helm-chart/
version: 4.1.0
options:
  hub:
    config:
      Authenticator:
        allow_all: true
        admin_users:
          - isla.williams
      GenericOAuthenticator:
        client_id: jupyterhub
        client_secret: "jupyterhubjupyterhub"
        username_claim: preferred_username
        scope:
          - openid
      JupyterHub:
        authenticator_class: generic-oauth
        log_level: 10
        cookie_secure: fals
    extraEnv:
      CACERT: /etc/ssl/certs/ca-certificates.crt
      CERT: /etc/ssl/certs/ca-certificates.crt
      CURLOPT_CAINFO: /etc/ssl/certs/ca-certificates.crt
      KEYCLOAK_NODEPORT_URL:
        valueFrom:
          configMapKeyRef:
            name: keycloak-address
            key: keycloakAddress
      KEYCLOAK_NODE_IP:
        valueFrom:
          configMapKeyRef:
            name: keycloak-address
            key: keycloakNodeIp
    extraVolumes:
      - name: tls-ca-cert
        ephemeral:
          volumeClaimTemplate:
            metadata:
              annotations:
                secrets.stackable.tech/class: tls
            spec:
              storageClassName: secrets.stackable.tech
              accessModes: [ReadWriteOnce]
              resources:
                requests:
                  storage: "1"
    extraVolumeMounts:
      - name: tls-ca-cert
        mountPath: /etc/ssl/certs/ca-certificates.crt
        subPath: ca.crt
      - name: tls-ca-cert
        mountPath: /usr/local/lib/python3.12/site-packages/certifi/cacert.pem
        subPath: ca.crt
    extraConfig:
      01-set-endpoints: |
        import os
        from oauthenticator.generic import GenericOAuthenticator

        keycloak_url = os.getenv("KEYCLOAK_NODEPORT_URL")
        keycloak_node_ip = os.getenv("KEYCLOAK_NODE_IP")

        if not keycloak_url or not keycloak_node_ip:
            raise ValueError("Keycloak IP environment variables not set")

        #c.GenericOAuthenticator.oauth_callback_url = f"10.0.156.237/hub/oauth_callback"  # <- JupyterHub LoadBalancer (proxy-public)
        c.GenericOAuthenticator.authorize_url = f"https://10.0.156.237:8443/realms/mm-stackable/protocol/openid-connect/auth"
        c.GenericOAuthenticator.token_url = f"https://10.0.156.237:8443/realms/mm-stackable/protocol/openid-connect/token"
        c.GenericOAuthenticator.userdata_url = f"https://10.0.156.237:8443/realms/mm-stackable/protocol/openid-connect/userinfo"
        c.GenericOAuthenticator.ssl_verify = False
        c.GenericOAuthenticator.validate_server_cert = False
        import tornado
        c.GenericOAuthenticator.http_client = tornado.httpclient.AsyncHTTPClient(force_instance=True)
        c.GenericOAuthenticator.http_client.defaults = {"validate_cert": False}
    service:
      type: ClusterIP
  proxy:
    service:
      type: ClusterIP
  rbac:
    create: true
  prePuller:
    hook:
      enabled: false
    continuous:
      enabled: false
  scheduling:
    userScheduler:
      enabled: false
  singleuser:
    serviceAccountName: spark
    networkPolicy:
      enabled: false
    extraLabels:
      stackable.tech/vendor: Stackable
    initContainers:
      - name: download-notebook
        image: oci.stackable.tech/sdp/tools:1.0.0-stackable0.0.0-dev
        command: ['sh', '-c', 'curl https://raw.githubusercontent.com/stackabletech/demos/main/stacks/jupyterhub-keycloak/process-s3.ipynb -o /notebook/process-s3.ipynb']
        volumeMounts:
          - name: notebook
            mountPath: /notebook
    storage:
      extraVolumes:
        - name: tls-ca-cert
          ephemeral:
            volumeClaimTemplate:
              metadata:
                annotations:
                  secrets.stackable.tech/class: tls
              spec:
                storageClassName: secrets.stackable.tech
                accessModes: [ReadWriteOnce]
                resources:
                  requests:
                    storage: "1"
        - name: minio-s3-credentials
          secret:
            secretName: minio-s3-credentials
        - name: notebook
          emptyDir:
            sizeLimit: 500Mi
      extraVolumeMounts:
        - name: tls-ca-cert
          mountPath: /stackable/secrets/tls-ca-cert
        - name: minio-s3-credentials
          mountPath: /minio-s3-credentials
        - name: notebook
          mountPath: /home/jovyan/notebook
    profileList:
      - display_name: "Lightweight (Dev)"
        description: "Minimal profile for low-resource environments"
        default: true
        profile_options:
          cpu:
            display_name: CPU
            choices:
              "0.5": { display_name: "0.5 CPU", kubespawner_override: { cpu_guarantee: 0.5, cpu_limit: 0.5 } }
              "1": { display_name: "1 CPU", kubespawner_override: { cpu_guarantee: 1, cpu_limit: 1 } }
          memory:
            display_name: Memory
            choices:
              "512 MB": { display_name: "512 MB", kubespawner_override: { mem_guarantee: "512M", mem_limit: "512M" } }
              "1 GB": { display_name: "1 GB", kubespawner_override: { mem_guarantee: "1G", mem_limit: "1G" } }
              "2 GB": { display_name: "2 GB", kubespawner_override: { mem_guarantee: "2G", mem_limit: "2G" } }
          image:
            display_name: Image
            choices:
              "quay.io/jupyter/pyspark-notebook:python-3.11.9":
                display_name: "Python 3.11.9 (Spark)"
                kubespawner_override: { image: "quay.io/jupyter/pyspark-notebook:python-3.11.9" }
              "quay.io/jupyter/pyspark-notebook:spark-3.5.2":
                display_name: "Spark 3.5.2"
                kubespawner_override: { image: "quay.io/jupyter/pyspark-notebook:spark-3.5.2" }
